import cirq
import qsimcirq
import numpy as np
import matplotlib.pyplot as plt

# Define qubits
qA, qB, qC = cirq.LineQubit.range(3)

# Function to create entanglement between B and C (EPR pair)
def create_entangled_pair(circuit, qB, qC):
    circuit.append([cirq.H(qB), cirq.CNOT(qB, qC)])

# Function to introduce a phase shift on qubit (simulating EM disturbance)
def apply_em_disturbance(circuit, qubit, phase_shift):
    circuit.append(cirq.Z(qubit)**(phase_shift / np.pi))  # Z rotation based on phase_shift

# Teleportation circuit
def teleport_circuit(phase_shift):
    circuit = cirq.Circuit()
    
    # Step 1: Prepare initial state of qubit A (superposition)
    circuit.append(cirq.H(qA))  # Place A in a superposition
    
    # Step 2: Create entanglement between B and C
    create_entangled_pair(circuit, qB, qC)
    
    # Step 3: Introduce EM disturbance (phase shift) on qubit C
    apply_em_disturbance(circuit, qC, phase_shift)
    
    # Step 4: Perform Bell measurement on A and B
    circuit.append([cirq.CNOT(qA, qB), cirq.H(qA)])
    circuit.append([cirq.measure(qA), cirq.measure(qB)])
    
    # Step 5: Apply conditional operations based on measurement results
    circuit.append(cirq.CNOT(qB, qC))
    circuit.append(cirq.CZ(qA, qC))
    
    return circuit

# Function to calculate fidelity
def calculate_fidelity(result, phase_shift):
    fidelity = np.cos(phase_shift / 2)**2  # Expected fidelity decreases with phase shift
    return fidelity

# Run the simulation with varying EM phase shift values
def run_simulation():
    sim = qsimcirq.QSimSimulator()
    phase_shifts = np.linspace(0, np.pi, 50)  # Phase shift from 0 to Ï€
    fidelities = []
    
    for phase_shift in phase_shifts:
        # Generate the circuit with current phase shift
        circuit = teleport_circuit(phase_shift)
        
        # Run simulation
        result = sim.run(circuit, repetitions=100)
        
        # Calculate fidelity and record
        fidelity = calculate_fidelity(result, phase_shift)
        fidelities.append(fidelity)
    
    # Plot fidelity vs phase shift
    plt.plot(phase_shifts, fidelities, label="Fidelity")
    plt.xlabel("Electromagnetic Phase Shift (radians)")
    plt.ylabel("Teleportation Fidelity")
    plt.title("Effect of Electromagnetic Disturbance on Quantum Teleportation")
    plt.legend()
    plt.show()

# Execute simulation
run_simulation()
